// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hotstorage_model.proto

#include "hotstorage_model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_hotstorage_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Block_hotstorage_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hotstorage_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Crane_hotstorage_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hotstorage_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CraneMove_hotstorage_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hotstorage_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CraneSchedule_hotstorage_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hotstorage_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Handover_hotstorage_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hotstorage_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Performance_hotstorage_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hotstorage_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Stack_hotstorage_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hotstorage_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeStamp_hotstorage_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hotstorage_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Uncertainties_hotstorage_5fmodel_2eproto;
namespace DynStacking {
namespace HotStorage {
namespace DataModel {
class BlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Block> _instance;
} _Block_default_instance_;
class CraneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Crane> _instance;
} _Crane_default_instance_;
class CraneMoveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CraneMove> _instance;
} _CraneMove_default_instance_;
class CraneScheduleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CraneSchedule> _instance;
} _CraneSchedule_default_instance_;
class HandoverDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Handover> _instance;
} _Handover_default_instance_;
class PerformanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Performance> _instance;
} _Performance_default_instance_;
class StackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stack> _instance;
} _Stack_default_instance_;
class TimeStampDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeStamp> _instance;
} _TimeStamp_default_instance_;
class UncertaintiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Uncertainties> _instance;
} _Uncertainties_default_instance_;
class WorldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<World> _instance;
} _World_default_instance_;
}  // namespace DataModel
}  // namespace HotStorage
}  // namespace DynStacking
static void InitDefaultsscc_info_Block_hotstorage_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DynStacking::HotStorage::DataModel::_Block_default_instance_;
    new (ptr) ::DynStacking::HotStorage::DataModel::Block();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Block_hotstorage_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Block_hotstorage_5fmodel_2eproto}, {
      &scc_info_TimeStamp_hotstorage_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_Crane_hotstorage_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DynStacking::HotStorage::DataModel::_Crane_default_instance_;
    new (ptr) ::DynStacking::HotStorage::DataModel::Crane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Crane_hotstorage_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Crane_hotstorage_5fmodel_2eproto}, {
      &scc_info_Block_hotstorage_5fmodel_2eproto.base,
      &scc_info_CraneSchedule_hotstorage_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_CraneMove_hotstorage_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DynStacking::HotStorage::DataModel::_CraneMove_default_instance_;
    new (ptr) ::DynStacking::HotStorage::DataModel::CraneMove();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CraneMove_hotstorage_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CraneMove_hotstorage_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_CraneSchedule_hotstorage_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DynStacking::HotStorage::DataModel::_CraneSchedule_default_instance_;
    new (ptr) ::DynStacking::HotStorage::DataModel::CraneSchedule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CraneSchedule_hotstorage_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CraneSchedule_hotstorage_5fmodel_2eproto}, {
      &scc_info_CraneMove_hotstorage_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_Handover_hotstorage_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DynStacking::HotStorage::DataModel::_Handover_default_instance_;
    new (ptr) ::DynStacking::HotStorage::DataModel::Handover();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Handover_hotstorage_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Handover_hotstorage_5fmodel_2eproto}, {
      &scc_info_Block_hotstorage_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_Performance_hotstorage_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DynStacking::HotStorage::DataModel::_Performance_default_instance_;
    new (ptr) ::DynStacking::HotStorage::DataModel::Performance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Performance_hotstorage_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Performance_hotstorage_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_Stack_hotstorage_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DynStacking::HotStorage::DataModel::_Stack_default_instance_;
    new (ptr) ::DynStacking::HotStorage::DataModel::Stack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Stack_hotstorage_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Stack_hotstorage_5fmodel_2eproto}, {
      &scc_info_Block_hotstorage_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_TimeStamp_hotstorage_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DynStacking::HotStorage::DataModel::_TimeStamp_default_instance_;
    new (ptr) ::DynStacking::HotStorage::DataModel::TimeStamp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeStamp_hotstorage_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimeStamp_hotstorage_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_Uncertainties_hotstorage_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DynStacking::HotStorage::DataModel::_Uncertainties_default_instance_;
    new (ptr) ::DynStacking::HotStorage::DataModel::Uncertainties();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Uncertainties_hotstorage_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Uncertainties_hotstorage_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_World_hotstorage_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DynStacking::HotStorage::DataModel::_World_default_instance_;
    new (ptr) ::DynStacking::HotStorage::DataModel::World();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_World_hotstorage_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_World_hotstorage_5fmodel_2eproto}, {
      &scc_info_TimeStamp_hotstorage_5fmodel_2eproto.base,
      &scc_info_Stack_hotstorage_5fmodel_2eproto.base,
      &scc_info_Handover_hotstorage_5fmodel_2eproto.base,
      &scc_info_Crane_hotstorage_5fmodel_2eproto.base,
      &scc_info_Performance_hotstorage_5fmodel_2eproto.base,
      &scc_info_Uncertainties_hotstorage_5fmodel_2eproto.base,
      &scc_info_CraneMove_hotstorage_5fmodel_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hotstorage_5fmodel_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_hotstorage_5fmodel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hotstorage_5fmodel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hotstorage_5fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Block, id_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Block, release_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Block, due_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Block, ready_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Crane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Crane, id_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Crane, locationid_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Crane, load_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Crane, schedule_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Crane, girderposition_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Crane, hoistposition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::CraneMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::CraneMove, blockid_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::CraneMove, sourceid_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::CraneMove, targetid_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::CraneMove, sequence_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::CraneMove, emptymove_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::CraneSchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::CraneSchedule, moves_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::CraneSchedule, sequencenr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Handover, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Handover, id_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Handover, ready_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Handover, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, cranemanipulations_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, servicelevelmean_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, leadtimemean_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, deliveredblocks_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, totalblocksontime_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, blockedarrivaltime_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, tardinessmean_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, bufferutilizationmean_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, craneutilizationmean_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, handoverutilizationmean_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Performance, upstreamutilizationmean_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Stack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Stack, id_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Stack, maxheight_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Stack, bottomtotop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::TimeStamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::TimeStamp, milliseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Uncertainties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Uncertainties, arrivalintervals_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Uncertainties, cranemovetimes_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::Uncertainties, handoverreadyintervals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::World, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::World, now_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::World, production_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::World, buffers_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::World, handover_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::World, crane_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::World, kpis_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::World, observationdata_),
  PROTOBUF_FIELD_OFFSET(::DynStacking::HotStorage::DataModel::World, invalidmoves_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DynStacking::HotStorage::DataModel::Block)},
  { 9, -1, sizeof(::DynStacking::HotStorage::DataModel::Crane)},
  { 20, -1, sizeof(::DynStacking::HotStorage::DataModel::CraneMove)},
  { 30, -1, sizeof(::DynStacking::HotStorage::DataModel::CraneSchedule)},
  { 37, -1, sizeof(::DynStacking::HotStorage::DataModel::Handover)},
  { 45, -1, sizeof(::DynStacking::HotStorage::DataModel::Performance)},
  { 61, -1, sizeof(::DynStacking::HotStorage::DataModel::Stack)},
  { 69, -1, sizeof(::DynStacking::HotStorage::DataModel::TimeStamp)},
  { 75, -1, sizeof(::DynStacking::HotStorage::DataModel::Uncertainties)},
  { 83, -1, sizeof(::DynStacking::HotStorage::DataModel::World)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DynStacking::HotStorage::DataModel::_Block_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DynStacking::HotStorage::DataModel::_Crane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DynStacking::HotStorage::DataModel::_CraneMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DynStacking::HotStorage::DataModel::_CraneSchedule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DynStacking::HotStorage::DataModel::_Handover_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DynStacking::HotStorage::DataModel::_Performance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DynStacking::HotStorage::DataModel::_Stack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DynStacking::HotStorage::DataModel::_TimeStamp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DynStacking::HotStorage::DataModel::_Uncertainties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DynStacking::HotStorage::DataModel::_World_default_instance_),
};

const char descriptor_table_protodef_hotstorage_5fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026hotstorage_model.proto\022 DynStacking.Ho"
  "tStorage.DataModel\"\232\001\n\005Block\022\n\n\002Id\030\001 \001(\005"
  "\022<\n\007Release\030\002 \001(\0132+.DynStacking.HotStora"
  "ge.DataModel.TimeStamp\0228\n\003Due\030\003 \001(\0132+.Dy"
  "nStacking.HotStorage.DataModel.TimeStamp"
  "\022\r\n\005Ready\030\004 \001(\010\"\320\001\n\005Crane\022\n\n\002Id\030\001 \001(\005\022\022\n"
  "\nLocationId\030\002 \001(\005\0225\n\004Load\030\003 \001(\0132\'.DynSta"
  "cking.HotStorage.DataModel.Block\022A\n\010Sche"
  "dule\030\004 \001(\0132/.DynStacking.HotStorage.Data"
  "Model.CraneSchedule\022\026\n\016GirderPosition\030\005 "
  "\001(\001\022\025\n\rHoistPosition\030\006 \001(\001\"e\n\tCraneMove\022"
  "\017\n\007BlockId\030\001 \001(\005\022\020\n\010SourceId\030\002 \001(\005\022\020\n\010Ta"
  "rgetId\030\003 \001(\005\022\020\n\010Sequence\030\004 \001(\005\022\021\n\tEmptyM"
  "ove\030\005 \001(\010\"_\n\rCraneSchedule\022:\n\005Moves\030\001 \003("
  "\0132+.DynStacking.HotStorage.DataModel.Cra"
  "neMove\022\022\n\nSequenceNr\030\002 \001(\005\"]\n\010Handover\022\n"
  "\n\002Id\030\001 \001(\005\022\r\n\005Ready\030\002 \001(\010\0226\n\005Block\030\003 \001(\013"
  "2\'.DynStacking.HotStorage.DataModel.Bloc"
  "k\"\277\002\n\013Performance\022\032\n\022CraneManipulations\030"
  "\001 \001(\005\022\030\n\020ServiceLevelMean\030\002 \001(\001\022\024\n\014LeadT"
  "imeMean\030\003 \001(\001\022\027\n\017DeliveredBlocks\030\004 \001(\005\022\031"
  "\n\021TotalBlocksOnTime\030\005 \001(\005\022\032\n\022BlockedArri"
  "valTime\030\006 \001(\001\022\025\n\rTardinessMean\030\007 \001(\001\022\035\n\025"
  "BufferUtilizationMean\030\010 \001(\001\022\034\n\024CraneUtil"
  "izationMean\030\t \001(\001\022\037\n\027HandoverUtilization"
  "Mean\030\n \001(\001\022\037\n\027UpstreamUtilizationMean\030\013 "
  "\001(\001\"d\n\005Stack\022\n\n\002Id\030\001 \001(\005\022\021\n\tMaxHeight\030\002 "
  "\001(\005\022<\n\013BottomToTop\030\003 \003(\0132\'.DynStacking.H"
  "otStorage.DataModel.Block\"!\n\tTimeStamp\022\024"
  "\n\014MilliSeconds\030\001 \001(\003\"m\n\rUncertainties\022\034\n"
  "\020ArrivalIntervals\030\001 \003(\001B\002\020\000\022\032\n\016CraneMove"
  "Times\030\002 \003(\001B\002\020\000\022\"\n\026HandoverReadyInterval"
  "s\030\003 \003(\001B\002\020\000\"\370\003\n\005World\0228\n\003Now\030\001 \001(\0132+.Dyn"
  "Stacking.HotStorage.DataModel.TimeStamp\022"
  ";\n\nProduction\030\002 \001(\0132\'.DynStacking.HotSto"
  "rage.DataModel.Stack\0228\n\007Buffers\030\003 \003(\0132\'."
  "DynStacking.HotStorage.DataModel.Stack\022<"
  "\n\010Handover\030\004 \001(\0132*.DynStacking.HotStorag"
  "e.DataModel.Handover\0226\n\005Crane\030\005 \001(\0132\'.Dy"
  "nStacking.HotStorage.DataModel.Crane\022;\n\004"
  "KPIs\030\006 \001(\0132-.DynStacking.HotStorage.Data"
  "Model.Performance\022H\n\017ObservationData\030\007 \001"
  "(\0132/.DynStacking.HotStorage.DataModel.Un"
  "certainties\022A\n\014InvalidMoves\030\010 \003(\0132+.DynS"
  "tacking.HotStorage.DataModel.CraneMoveb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hotstorage_5fmodel_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_hotstorage_5fmodel_2eproto_sccs[10] = {
  &scc_info_Block_hotstorage_5fmodel_2eproto.base,
  &scc_info_Crane_hotstorage_5fmodel_2eproto.base,
  &scc_info_CraneMove_hotstorage_5fmodel_2eproto.base,
  &scc_info_CraneSchedule_hotstorage_5fmodel_2eproto.base,
  &scc_info_Handover_hotstorage_5fmodel_2eproto.base,
  &scc_info_Performance_hotstorage_5fmodel_2eproto.base,
  &scc_info_Stack_hotstorage_5fmodel_2eproto.base,
  &scc_info_TimeStamp_hotstorage_5fmodel_2eproto.base,
  &scc_info_Uncertainties_hotstorage_5fmodel_2eproto.base,
  &scc_info_World_hotstorage_5fmodel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hotstorage_5fmodel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hotstorage_5fmodel_2eproto = {
  false, false, descriptor_table_protodef_hotstorage_5fmodel_2eproto, "hotstorage_model.proto", 1806,
  &descriptor_table_hotstorage_5fmodel_2eproto_once, descriptor_table_hotstorage_5fmodel_2eproto_sccs, descriptor_table_hotstorage_5fmodel_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_hotstorage_5fmodel_2eproto::offsets,
  file_level_metadata_hotstorage_5fmodel_2eproto, 10, file_level_enum_descriptors_hotstorage_5fmodel_2eproto, file_level_service_descriptors_hotstorage_5fmodel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_hotstorage_5fmodel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_hotstorage_5fmodel_2eproto)), true);
namespace DynStacking {
namespace HotStorage {
namespace DataModel {

// ===================================================================

class Block::_Internal {
 public:
  static const ::DynStacking::HotStorage::DataModel::TimeStamp& release(const Block* msg);
  static const ::DynStacking::HotStorage::DataModel::TimeStamp& due(const Block* msg);
};

const ::DynStacking::HotStorage::DataModel::TimeStamp&
Block::_Internal::release(const Block* msg) {
  return *msg->release_;
}
const ::DynStacking::HotStorage::DataModel::TimeStamp&
Block::_Internal::due(const Block* msg) {
  return *msg->due_;
}
Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DynStacking.HotStorage.DataModel.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_release()) {
    release_ = new ::DynStacking::HotStorage::DataModel::TimeStamp(*from.release_);
  } else {
    release_ = nullptr;
  }
  if (from._internal_has_due()) {
    due_ = new ::DynStacking::HotStorage::DataModel::TimeStamp(*from.due_);
  } else {
    due_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ready_) -
    reinterpret_cast<char*>(&id_)) + sizeof(ready_));
  // @@protoc_insertion_point(copy_constructor:DynStacking.HotStorage.DataModel.Block)
}

void Block::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Block_hotstorage_5fmodel_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&release_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ready_) -
      reinterpret_cast<char*>(&release_)) + sizeof(ready_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:DynStacking.HotStorage.DataModel.Block)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete release_;
  if (this != internal_default_instance()) delete due_;
}

void Block::ArenaDtor(void* object) {
  Block* _this = reinterpret_cast< Block* >(object);
  (void)_this;
}
void Block::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Block& Block::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Block_hotstorage_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.HotStorage.DataModel.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && release_ != nullptr) {
    delete release_;
  }
  release_ = nullptr;
  if (GetArena() == nullptr && due_ != nullptr) {
    delete due_;
  }
  due_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ready_) -
      reinterpret_cast<char*>(&id_)) + sizeof(ready_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DynStacking.HotStorage.DataModel.TimeStamp Release = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_release(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DynStacking.HotStorage.DataModel.TimeStamp Due = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_due(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Ready = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Block::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.HotStorage.DataModel.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .DynStacking.HotStorage.DataModel.TimeStamp Release = 2;
  if (this->has_release()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::release(this), target, stream);
  }

  // .DynStacking.HotStorage.DataModel.TimeStamp Due = 3;
  if (this->has_due()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::due(this), target, stream);
  }

  // bool Ready = 4;
  if (this->ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_ready(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.HotStorage.DataModel.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.HotStorage.DataModel.Block)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DynStacking.HotStorage.DataModel.TimeStamp Release = 2;
  if (this->has_release()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *release_);
  }

  // .DynStacking.HotStorage.DataModel.TimeStamp Due = 3;
  if (this->has_due()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *due_);
  }

  // int32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // bool Ready = 4;
  if (this->ready() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DynStacking.HotStorage.DataModel.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Block>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DynStacking.HotStorage.DataModel.Block)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DynStacking.HotStorage.DataModel.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.HotStorage.DataModel.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_release()) {
    _internal_mutable_release()->::DynStacking::HotStorage::DataModel::TimeStamp::MergeFrom(from._internal_release());
  }
  if (from.has_due()) {
    _internal_mutable_due()->::DynStacking::HotStorage::DataModel::TimeStamp::MergeFrom(from._internal_due());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.ready() != 0) {
    _internal_set_ready(from._internal_ready());
  }
}

void Block::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DynStacking.HotStorage.DataModel.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.HotStorage.DataModel.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, ready_)
      + sizeof(Block::ready_)
      - PROTOBUF_FIELD_OFFSET(Block, release_)>(
          reinterpret_cast<char*>(&release_),
          reinterpret_cast<char*>(&other->release_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Crane::_Internal {
 public:
  static const ::DynStacking::HotStorage::DataModel::Block& load(const Crane* msg);
  static const ::DynStacking::HotStorage::DataModel::CraneSchedule& schedule(const Crane* msg);
};

const ::DynStacking::HotStorage::DataModel::Block&
Crane::_Internal::load(const Crane* msg) {
  return *msg->load_;
}
const ::DynStacking::HotStorage::DataModel::CraneSchedule&
Crane::_Internal::schedule(const Crane* msg) {
  return *msg->schedule_;
}
Crane::Crane(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DynStacking.HotStorage.DataModel.Crane)
}
Crane::Crane(const Crane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_load()) {
    load_ = new ::DynStacking::HotStorage::DataModel::Block(*from.load_);
  } else {
    load_ = nullptr;
  }
  if (from._internal_has_schedule()) {
    schedule_ = new ::DynStacking::HotStorage::DataModel::CraneSchedule(*from.schedule_);
  } else {
    schedule_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hoistposition_) -
    reinterpret_cast<char*>(&id_)) + sizeof(hoistposition_));
  // @@protoc_insertion_point(copy_constructor:DynStacking.HotStorage.DataModel.Crane)
}

void Crane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Crane_hotstorage_5fmodel_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&load_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&hoistposition_) -
      reinterpret_cast<char*>(&load_)) + sizeof(hoistposition_));
}

Crane::~Crane() {
  // @@protoc_insertion_point(destructor:DynStacking.HotStorage.DataModel.Crane)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Crane::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete load_;
  if (this != internal_default_instance()) delete schedule_;
}

void Crane::ArenaDtor(void* object) {
  Crane* _this = reinterpret_cast< Crane* >(object);
  (void)_this;
}
void Crane::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Crane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Crane& Crane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Crane_hotstorage_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Crane::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.HotStorage.DataModel.Crane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && load_ != nullptr) {
    delete load_;
  }
  load_ = nullptr;
  if (GetArena() == nullptr && schedule_ != nullptr) {
    delete schedule_;
  }
  schedule_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hoistposition_) -
      reinterpret_cast<char*>(&id_)) + sizeof(hoistposition_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Crane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LocationId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          locationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DynStacking.HotStorage.DataModel.Block Load = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_load(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DynStacking.HotStorage.DataModel.CraneSchedule Schedule = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_schedule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double GirderPosition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          girderposition_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double HoistPosition = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          hoistposition_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Crane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.HotStorage.DataModel.Crane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 LocationId = 2;
  if (this->locationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_locationid(), target);
  }

  // .DynStacking.HotStorage.DataModel.Block Load = 3;
  if (this->has_load()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::load(this), target, stream);
  }

  // .DynStacking.HotStorage.DataModel.CraneSchedule Schedule = 4;
  if (this->has_schedule()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::schedule(this), target, stream);
  }

  // double GirderPosition = 5;
  if (!(this->girderposition() <= 0 && this->girderposition() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_girderposition(), target);
  }

  // double HoistPosition = 6;
  if (!(this->hoistposition() <= 0 && this->hoistposition() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_hoistposition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.HotStorage.DataModel.Crane)
  return target;
}

size_t Crane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.HotStorage.DataModel.Crane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DynStacking.HotStorage.DataModel.Block Load = 3;
  if (this->has_load()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *load_);
  }

  // .DynStacking.HotStorage.DataModel.CraneSchedule Schedule = 4;
  if (this->has_schedule()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *schedule_);
  }

  // int32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 LocationId = 2;
  if (this->locationid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_locationid());
  }

  // double GirderPosition = 5;
  if (!(this->girderposition() <= 0 && this->girderposition() >= 0)) {
    total_size += 1 + 8;
  }

  // double HoistPosition = 6;
  if (!(this->hoistposition() <= 0 && this->hoistposition() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Crane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DynStacking.HotStorage.DataModel.Crane)
  GOOGLE_DCHECK_NE(&from, this);
  const Crane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Crane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DynStacking.HotStorage.DataModel.Crane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DynStacking.HotStorage.DataModel.Crane)
    MergeFrom(*source);
  }
}

void Crane::MergeFrom(const Crane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.HotStorage.DataModel.Crane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_load()) {
    _internal_mutable_load()->::DynStacking::HotStorage::DataModel::Block::MergeFrom(from._internal_load());
  }
  if (from.has_schedule()) {
    _internal_mutable_schedule()->::DynStacking::HotStorage::DataModel::CraneSchedule::MergeFrom(from._internal_schedule());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.locationid() != 0) {
    _internal_set_locationid(from._internal_locationid());
  }
  if (!(from.girderposition() <= 0 && from.girderposition() >= 0)) {
    _internal_set_girderposition(from._internal_girderposition());
  }
  if (!(from.hoistposition() <= 0 && from.hoistposition() >= 0)) {
    _internal_set_hoistposition(from._internal_hoistposition());
  }
}

void Crane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DynStacking.HotStorage.DataModel.Crane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Crane::CopyFrom(const Crane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.HotStorage.DataModel.Crane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Crane::IsInitialized() const {
  return true;
}

void Crane::InternalSwap(Crane* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Crane, hoistposition_)
      + sizeof(Crane::hoistposition_)
      - PROTOBUF_FIELD_OFFSET(Crane, load_)>(
          reinterpret_cast<char*>(&load_),
          reinterpret_cast<char*>(&other->load_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Crane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CraneMove::_Internal {
 public:
};

CraneMove::CraneMove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DynStacking.HotStorage.DataModel.CraneMove)
}
CraneMove::CraneMove(const CraneMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&blockid_, &from.blockid_,
    static_cast<size_t>(reinterpret_cast<char*>(&emptymove_) -
    reinterpret_cast<char*>(&blockid_)) + sizeof(emptymove_));
  // @@protoc_insertion_point(copy_constructor:DynStacking.HotStorage.DataModel.CraneMove)
}

void CraneMove::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&blockid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&emptymove_) -
      reinterpret_cast<char*>(&blockid_)) + sizeof(emptymove_));
}

CraneMove::~CraneMove() {
  // @@protoc_insertion_point(destructor:DynStacking.HotStorage.DataModel.CraneMove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CraneMove::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CraneMove::ArenaDtor(void* object) {
  CraneMove* _this = reinterpret_cast< CraneMove* >(object);
  (void)_this;
}
void CraneMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CraneMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CraneMove& CraneMove::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CraneMove_hotstorage_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void CraneMove::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.HotStorage.DataModel.CraneMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&blockid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&emptymove_) -
      reinterpret_cast<char*>(&blockid_)) + sizeof(emptymove_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CraneMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 BlockId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          blockid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 SourceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sourceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TargetId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool EmptyMove = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          emptymove_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CraneMove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.HotStorage.DataModel.CraneMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 BlockId = 1;
  if (this->blockid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_blockid(), target);
  }

  // int32 SourceId = 2;
  if (this->sourceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sourceid(), target);
  }

  // int32 TargetId = 3;
  if (this->targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_targetid(), target);
  }

  // int32 Sequence = 4;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sequence(), target);
  }

  // bool EmptyMove = 5;
  if (this->emptymove() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_emptymove(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.HotStorage.DataModel.CraneMove)
  return target;
}

size_t CraneMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.HotStorage.DataModel.CraneMove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 BlockId = 1;
  if (this->blockid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_blockid());
  }

  // int32 SourceId = 2;
  if (this->sourceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sourceid());
  }

  // int32 TargetId = 3;
  if (this->targetid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_targetid());
  }

  // int32 Sequence = 4;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence());
  }

  // bool EmptyMove = 5;
  if (this->emptymove() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CraneMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DynStacking.HotStorage.DataModel.CraneMove)
  GOOGLE_DCHECK_NE(&from, this);
  const CraneMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CraneMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DynStacking.HotStorage.DataModel.CraneMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DynStacking.HotStorage.DataModel.CraneMove)
    MergeFrom(*source);
  }
}

void CraneMove::MergeFrom(const CraneMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.HotStorage.DataModel.CraneMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blockid() != 0) {
    _internal_set_blockid(from._internal_blockid());
  }
  if (from.sourceid() != 0) {
    _internal_set_sourceid(from._internal_sourceid());
  }
  if (from.targetid() != 0) {
    _internal_set_targetid(from._internal_targetid());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.emptymove() != 0) {
    _internal_set_emptymove(from._internal_emptymove());
  }
}

void CraneMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DynStacking.HotStorage.DataModel.CraneMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CraneMove::CopyFrom(const CraneMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.HotStorage.DataModel.CraneMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CraneMove::IsInitialized() const {
  return true;
}

void CraneMove::InternalSwap(CraneMove* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CraneMove, emptymove_)
      + sizeof(CraneMove::emptymove_)
      - PROTOBUF_FIELD_OFFSET(CraneMove, blockid_)>(
          reinterpret_cast<char*>(&blockid_),
          reinterpret_cast<char*>(&other->blockid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CraneMove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CraneSchedule::_Internal {
 public:
};

CraneSchedule::CraneSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  moves_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DynStacking.HotStorage.DataModel.CraneSchedule)
}
CraneSchedule::CraneSchedule(const CraneSchedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      moves_(from.moves_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequencenr_ = from.sequencenr_;
  // @@protoc_insertion_point(copy_constructor:DynStacking.HotStorage.DataModel.CraneSchedule)
}

void CraneSchedule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CraneSchedule_hotstorage_5fmodel_2eproto.base);
  sequencenr_ = 0;
}

CraneSchedule::~CraneSchedule() {
  // @@protoc_insertion_point(destructor:DynStacking.HotStorage.DataModel.CraneSchedule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CraneSchedule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CraneSchedule::ArenaDtor(void* object) {
  CraneSchedule* _this = reinterpret_cast< CraneSchedule* >(object);
  (void)_this;
}
void CraneSchedule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CraneSchedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CraneSchedule& CraneSchedule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CraneSchedule_hotstorage_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void CraneSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.HotStorage.DataModel.CraneSchedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  moves_.Clear();
  sequencenr_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CraneSchedule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DynStacking.HotStorage.DataModel.CraneMove Moves = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_moves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 SequenceNr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequencenr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CraneSchedule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.HotStorage.DataModel.CraneSchedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DynStacking.HotStorage.DataModel.CraneMove Moves = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_moves_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_moves(i), target, stream);
  }

  // int32 SequenceNr = 2;
  if (this->sequencenr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sequencenr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.HotStorage.DataModel.CraneSchedule)
  return target;
}

size_t CraneSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.HotStorage.DataModel.CraneSchedule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DynStacking.HotStorage.DataModel.CraneMove Moves = 1;
  total_size += 1UL * this->_internal_moves_size();
  for (const auto& msg : this->moves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 SequenceNr = 2;
  if (this->sequencenr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequencenr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CraneSchedule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DynStacking.HotStorage.DataModel.CraneSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  const CraneSchedule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CraneSchedule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DynStacking.HotStorage.DataModel.CraneSchedule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DynStacking.HotStorage.DataModel.CraneSchedule)
    MergeFrom(*source);
  }
}

void CraneSchedule::MergeFrom(const CraneSchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.HotStorage.DataModel.CraneSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  moves_.MergeFrom(from.moves_);
  if (from.sequencenr() != 0) {
    _internal_set_sequencenr(from._internal_sequencenr());
  }
}

void CraneSchedule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DynStacking.HotStorage.DataModel.CraneSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CraneSchedule::CopyFrom(const CraneSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.HotStorage.DataModel.CraneSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CraneSchedule::IsInitialized() const {
  return true;
}

void CraneSchedule::InternalSwap(CraneSchedule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  moves_.InternalSwap(&other->moves_);
  swap(sequencenr_, other->sequencenr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CraneSchedule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Handover::_Internal {
 public:
  static const ::DynStacking::HotStorage::DataModel::Block& block(const Handover* msg);
};

const ::DynStacking::HotStorage::DataModel::Block&
Handover::_Internal::block(const Handover* msg) {
  return *msg->block_;
}
Handover::Handover(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DynStacking.HotStorage.DataModel.Handover)
}
Handover::Handover(const Handover& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::DynStacking::HotStorage::DataModel::Block(*from.block_);
  } else {
    block_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ready_) -
    reinterpret_cast<char*>(&id_)) + sizeof(ready_));
  // @@protoc_insertion_point(copy_constructor:DynStacking.HotStorage.DataModel.Handover)
}

void Handover::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Handover_hotstorage_5fmodel_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&block_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ready_) -
      reinterpret_cast<char*>(&block_)) + sizeof(ready_));
}

Handover::~Handover() {
  // @@protoc_insertion_point(destructor:DynStacking.HotStorage.DataModel.Handover)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Handover::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void Handover::ArenaDtor(void* object) {
  Handover* _this = reinterpret_cast< Handover* >(object);
  (void)_this;
}
void Handover::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Handover::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Handover& Handover::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Handover_hotstorage_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Handover::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.HotStorage.DataModel.Handover)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ready_) -
      reinterpret_cast<char*>(&id_)) + sizeof(ready_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Handover::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Ready = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DynStacking.HotStorage.DataModel.Block Block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Handover::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.HotStorage.DataModel.Handover)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // bool Ready = 2;
  if (this->ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ready(), target);
  }

  // .DynStacking.HotStorage.DataModel.Block Block = 3;
  if (this->has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.HotStorage.DataModel.Handover)
  return target;
}

size_t Handover::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.HotStorage.DataModel.Handover)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DynStacking.HotStorage.DataModel.Block Block = 3;
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  // int32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // bool Ready = 2;
  if (this->ready() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Handover::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DynStacking.HotStorage.DataModel.Handover)
  GOOGLE_DCHECK_NE(&from, this);
  const Handover* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Handover>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DynStacking.HotStorage.DataModel.Handover)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DynStacking.HotStorage.DataModel.Handover)
    MergeFrom(*source);
  }
}

void Handover::MergeFrom(const Handover& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.HotStorage.DataModel.Handover)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block()) {
    _internal_mutable_block()->::DynStacking::HotStorage::DataModel::Block::MergeFrom(from._internal_block());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.ready() != 0) {
    _internal_set_ready(from._internal_ready());
  }
}

void Handover::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DynStacking.HotStorage.DataModel.Handover)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Handover::CopyFrom(const Handover& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.HotStorage.DataModel.Handover)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Handover::IsInitialized() const {
  return true;
}

void Handover::InternalSwap(Handover* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Handover, ready_)
      + sizeof(Handover::ready_)
      - PROTOBUF_FIELD_OFFSET(Handover, block_)>(
          reinterpret_cast<char*>(&block_),
          reinterpret_cast<char*>(&other->block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Handover::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Performance::_Internal {
 public:
};

Performance::Performance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DynStacking.HotStorage.DataModel.Performance)
}
Performance::Performance(const Performance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&servicelevelmean_, &from.servicelevelmean_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalblocksontime_) -
    reinterpret_cast<char*>(&servicelevelmean_)) + sizeof(totalblocksontime_));
  // @@protoc_insertion_point(copy_constructor:DynStacking.HotStorage.DataModel.Performance)
}

void Performance::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&servicelevelmean_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&totalblocksontime_) -
      reinterpret_cast<char*>(&servicelevelmean_)) + sizeof(totalblocksontime_));
}

Performance::~Performance() {
  // @@protoc_insertion_point(destructor:DynStacking.HotStorage.DataModel.Performance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Performance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Performance::ArenaDtor(void* object) {
  Performance* _this = reinterpret_cast< Performance* >(object);
  (void)_this;
}
void Performance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Performance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Performance& Performance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Performance_hotstorage_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Performance::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.HotStorage.DataModel.Performance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&servicelevelmean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalblocksontime_) -
      reinterpret_cast<char*>(&servicelevelmean_)) + sizeof(totalblocksontime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Performance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 CraneManipulations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cranemanipulations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ServiceLevelMean = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          servicelevelmean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double LeadTimeMean = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          leadtimemean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 DeliveredBlocks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          deliveredblocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TotalBlocksOnTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          totalblocksontime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double BlockedArrivalTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          blockedarrivaltime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double TardinessMean = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          tardinessmean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double BufferUtilizationMean = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          bufferutilizationmean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CraneUtilizationMean = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          craneutilizationmean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double HandoverUtilizationMean = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          handoverutilizationmean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double UpstreamUtilizationMean = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          upstreamutilizationmean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Performance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.HotStorage.DataModel.Performance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 CraneManipulations = 1;
  if (this->cranemanipulations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cranemanipulations(), target);
  }

  // double ServiceLevelMean = 2;
  if (!(this->servicelevelmean() <= 0 && this->servicelevelmean() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_servicelevelmean(), target);
  }

  // double LeadTimeMean = 3;
  if (!(this->leadtimemean() <= 0 && this->leadtimemean() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_leadtimemean(), target);
  }

  // int32 DeliveredBlocks = 4;
  if (this->deliveredblocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_deliveredblocks(), target);
  }

  // int32 TotalBlocksOnTime = 5;
  if (this->totalblocksontime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_totalblocksontime(), target);
  }

  // double BlockedArrivalTime = 6;
  if (!(this->blockedarrivaltime() <= 0 && this->blockedarrivaltime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_blockedarrivaltime(), target);
  }

  // double TardinessMean = 7;
  if (!(this->tardinessmean() <= 0 && this->tardinessmean() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_tardinessmean(), target);
  }

  // double BufferUtilizationMean = 8;
  if (!(this->bufferutilizationmean() <= 0 && this->bufferutilizationmean() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_bufferutilizationmean(), target);
  }

  // double CraneUtilizationMean = 9;
  if (!(this->craneutilizationmean() <= 0 && this->craneutilizationmean() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_craneutilizationmean(), target);
  }

  // double HandoverUtilizationMean = 10;
  if (!(this->handoverutilizationmean() <= 0 && this->handoverutilizationmean() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_handoverutilizationmean(), target);
  }

  // double UpstreamUtilizationMean = 11;
  if (!(this->upstreamutilizationmean() <= 0 && this->upstreamutilizationmean() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_upstreamutilizationmean(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.HotStorage.DataModel.Performance)
  return target;
}

size_t Performance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.HotStorage.DataModel.Performance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double ServiceLevelMean = 2;
  if (!(this->servicelevelmean() <= 0 && this->servicelevelmean() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 CraneManipulations = 1;
  if (this->cranemanipulations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cranemanipulations());
  }

  // int32 DeliveredBlocks = 4;
  if (this->deliveredblocks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_deliveredblocks());
  }

  // double LeadTimeMean = 3;
  if (!(this->leadtimemean() <= 0 && this->leadtimemean() >= 0)) {
    total_size += 1 + 8;
  }

  // double BlockedArrivalTime = 6;
  if (!(this->blockedarrivaltime() <= 0 && this->blockedarrivaltime() >= 0)) {
    total_size += 1 + 8;
  }

  // double TardinessMean = 7;
  if (!(this->tardinessmean() <= 0 && this->tardinessmean() >= 0)) {
    total_size += 1 + 8;
  }

  // double BufferUtilizationMean = 8;
  if (!(this->bufferutilizationmean() <= 0 && this->bufferutilizationmean() >= 0)) {
    total_size += 1 + 8;
  }

  // double CraneUtilizationMean = 9;
  if (!(this->craneutilizationmean() <= 0 && this->craneutilizationmean() >= 0)) {
    total_size += 1 + 8;
  }

  // double HandoverUtilizationMean = 10;
  if (!(this->handoverutilizationmean() <= 0 && this->handoverutilizationmean() >= 0)) {
    total_size += 1 + 8;
  }

  // double UpstreamUtilizationMean = 11;
  if (!(this->upstreamutilizationmean() <= 0 && this->upstreamutilizationmean() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 TotalBlocksOnTime = 5;
  if (this->totalblocksontime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_totalblocksontime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Performance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DynStacking.HotStorage.DataModel.Performance)
  GOOGLE_DCHECK_NE(&from, this);
  const Performance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Performance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DynStacking.HotStorage.DataModel.Performance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DynStacking.HotStorage.DataModel.Performance)
    MergeFrom(*source);
  }
}

void Performance::MergeFrom(const Performance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.HotStorage.DataModel.Performance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.servicelevelmean() <= 0 && from.servicelevelmean() >= 0)) {
    _internal_set_servicelevelmean(from._internal_servicelevelmean());
  }
  if (from.cranemanipulations() != 0) {
    _internal_set_cranemanipulations(from._internal_cranemanipulations());
  }
  if (from.deliveredblocks() != 0) {
    _internal_set_deliveredblocks(from._internal_deliveredblocks());
  }
  if (!(from.leadtimemean() <= 0 && from.leadtimemean() >= 0)) {
    _internal_set_leadtimemean(from._internal_leadtimemean());
  }
  if (!(from.blockedarrivaltime() <= 0 && from.blockedarrivaltime() >= 0)) {
    _internal_set_blockedarrivaltime(from._internal_blockedarrivaltime());
  }
  if (!(from.tardinessmean() <= 0 && from.tardinessmean() >= 0)) {
    _internal_set_tardinessmean(from._internal_tardinessmean());
  }
  if (!(from.bufferutilizationmean() <= 0 && from.bufferutilizationmean() >= 0)) {
    _internal_set_bufferutilizationmean(from._internal_bufferutilizationmean());
  }
  if (!(from.craneutilizationmean() <= 0 && from.craneutilizationmean() >= 0)) {
    _internal_set_craneutilizationmean(from._internal_craneutilizationmean());
  }
  if (!(from.handoverutilizationmean() <= 0 && from.handoverutilizationmean() >= 0)) {
    _internal_set_handoverutilizationmean(from._internal_handoverutilizationmean());
  }
  if (!(from.upstreamutilizationmean() <= 0 && from.upstreamutilizationmean() >= 0)) {
    _internal_set_upstreamutilizationmean(from._internal_upstreamutilizationmean());
  }
  if (from.totalblocksontime() != 0) {
    _internal_set_totalblocksontime(from._internal_totalblocksontime());
  }
}

void Performance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DynStacking.HotStorage.DataModel.Performance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Performance::CopyFrom(const Performance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.HotStorage.DataModel.Performance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Performance::IsInitialized() const {
  return true;
}

void Performance::InternalSwap(Performance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Performance, totalblocksontime_)
      + sizeof(Performance::totalblocksontime_)
      - PROTOBUF_FIELD_OFFSET(Performance, servicelevelmean_)>(
          reinterpret_cast<char*>(&servicelevelmean_),
          reinterpret_cast<char*>(&other->servicelevelmean_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Performance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Stack::_Internal {
 public:
};

Stack::Stack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bottomtotop_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DynStacking.HotStorage.DataModel.Stack)
}
Stack::Stack(const Stack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bottomtotop_(from.bottomtotop_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxheight_) -
    reinterpret_cast<char*>(&id_)) + sizeof(maxheight_));
  // @@protoc_insertion_point(copy_constructor:DynStacking.HotStorage.DataModel.Stack)
}

void Stack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stack_hotstorage_5fmodel_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&maxheight_) -
      reinterpret_cast<char*>(&id_)) + sizeof(maxheight_));
}

Stack::~Stack() {
  // @@protoc_insertion_point(destructor:DynStacking.HotStorage.DataModel.Stack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Stack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Stack::ArenaDtor(void* object) {
  Stack* _this = reinterpret_cast< Stack* >(object);
  (void)_this;
}
void Stack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stack& Stack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stack_hotstorage_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Stack::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.HotStorage.DataModel.Stack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bottomtotop_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxheight_) -
      reinterpret_cast<char*>(&id_)) + sizeof(maxheight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MaxHeight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DynStacking.HotStorage.DataModel.Block BottomToTop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bottomtotop(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.HotStorage.DataModel.Stack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 MaxHeight = 2;
  if (this->maxheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxheight(), target);
  }

  // repeated .DynStacking.HotStorage.DataModel.Block BottomToTop = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bottomtotop_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_bottomtotop(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.HotStorage.DataModel.Stack)
  return target;
}

size_t Stack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.HotStorage.DataModel.Stack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DynStacking.HotStorage.DataModel.Block BottomToTop = 3;
  total_size += 1UL * this->_internal_bottomtotop_size();
  for (const auto& msg : this->bottomtotop_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 MaxHeight = 2;
  if (this->maxheight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxheight());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DynStacking.HotStorage.DataModel.Stack)
  GOOGLE_DCHECK_NE(&from, this);
  const Stack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DynStacking.HotStorage.DataModel.Stack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DynStacking.HotStorage.DataModel.Stack)
    MergeFrom(*source);
  }
}

void Stack::MergeFrom(const Stack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.HotStorage.DataModel.Stack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bottomtotop_.MergeFrom(from.bottomtotop_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.maxheight() != 0) {
    _internal_set_maxheight(from._internal_maxheight());
  }
}

void Stack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DynStacking.HotStorage.DataModel.Stack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stack::CopyFrom(const Stack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.HotStorage.DataModel.Stack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stack::IsInitialized() const {
  return true;
}

void Stack::InternalSwap(Stack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bottomtotop_.InternalSwap(&other->bottomtotop_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stack, maxheight_)
      + sizeof(Stack::maxheight_)
      - PROTOBUF_FIELD_OFFSET(Stack, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TimeStamp::_Internal {
 public:
};

TimeStamp::TimeStamp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DynStacking.HotStorage.DataModel.TimeStamp)
}
TimeStamp::TimeStamp(const TimeStamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  milliseconds_ = from.milliseconds_;
  // @@protoc_insertion_point(copy_constructor:DynStacking.HotStorage.DataModel.TimeStamp)
}

void TimeStamp::SharedCtor() {
  milliseconds_ = PROTOBUF_LONGLONG(0);
}

TimeStamp::~TimeStamp() {
  // @@protoc_insertion_point(destructor:DynStacking.HotStorage.DataModel.TimeStamp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeStamp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TimeStamp::ArenaDtor(void* object) {
  TimeStamp* _this = reinterpret_cast< TimeStamp* >(object);
  (void)_this;
}
void TimeStamp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeStamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeStamp& TimeStamp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeStamp_hotstorage_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void TimeStamp::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.HotStorage.DataModel.TimeStamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  milliseconds_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeStamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 MilliSeconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeStamp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.HotStorage.DataModel.TimeStamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 MilliSeconds = 1;
  if (this->milliseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_milliseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.HotStorage.DataModel.TimeStamp)
  return target;
}

size_t TimeStamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.HotStorage.DataModel.TimeStamp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 MilliSeconds = 1;
  if (this->milliseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_milliseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeStamp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DynStacking.HotStorage.DataModel.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeStamp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeStamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DynStacking.HotStorage.DataModel.TimeStamp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DynStacking.HotStorage.DataModel.TimeStamp)
    MergeFrom(*source);
  }
}

void TimeStamp::MergeFrom(const TimeStamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.HotStorage.DataModel.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.milliseconds() != 0) {
    _internal_set_milliseconds(from._internal_milliseconds());
  }
}

void TimeStamp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DynStacking.HotStorage.DataModel.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeStamp::CopyFrom(const TimeStamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.HotStorage.DataModel.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeStamp::IsInitialized() const {
  return true;
}

void TimeStamp::InternalSwap(TimeStamp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(milliseconds_, other->milliseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeStamp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Uncertainties::_Internal {
 public:
};

Uncertainties::Uncertainties(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arrivalintervals_(arena),
  cranemovetimes_(arena),
  handoverreadyintervals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DynStacking.HotStorage.DataModel.Uncertainties)
}
Uncertainties::Uncertainties(const Uncertainties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arrivalintervals_(from.arrivalintervals_),
      cranemovetimes_(from.cranemovetimes_),
      handoverreadyintervals_(from.handoverreadyintervals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DynStacking.HotStorage.DataModel.Uncertainties)
}

void Uncertainties::SharedCtor() {
}

Uncertainties::~Uncertainties() {
  // @@protoc_insertion_point(destructor:DynStacking.HotStorage.DataModel.Uncertainties)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Uncertainties::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Uncertainties::ArenaDtor(void* object) {
  Uncertainties* _this = reinterpret_cast< Uncertainties* >(object);
  (void)_this;
}
void Uncertainties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Uncertainties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Uncertainties& Uncertainties::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Uncertainties_hotstorage_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Uncertainties::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.HotStorage.DataModel.Uncertainties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arrivalintervals_.Clear();
  cranemovetimes_.Clear();
  handoverreadyintervals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Uncertainties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double ArrivalIntervals = 1 [packed = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_arrivalintervals(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_arrivalintervals(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double CraneMoveTimes = 2 [packed = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cranemovetimes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_cranemovetimes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double HandoverReadyIntervals = 3 [packed = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_handoverreadyintervals(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_handoverreadyintervals(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Uncertainties::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.HotStorage.DataModel.Uncertainties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double ArrivalIntervals = 1 [packed = false];
  for (int i = 0, n = this->_internal_arrivalintervals_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_arrivalintervals(i), target);
  }

  // repeated double CraneMoveTimes = 2 [packed = false];
  for (int i = 0, n = this->_internal_cranemovetimes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_cranemovetimes(i), target);
  }

  // repeated double HandoverReadyIntervals = 3 [packed = false];
  for (int i = 0, n = this->_internal_handoverreadyintervals_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_handoverreadyintervals(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.HotStorage.DataModel.Uncertainties)
  return target;
}

size_t Uncertainties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.HotStorage.DataModel.Uncertainties)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double ArrivalIntervals = 1 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arrivalintervals_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_arrivalintervals_size());
    total_size += data_size;
  }

  // repeated double CraneMoveTimes = 2 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cranemovetimes_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cranemovetimes_size());
    total_size += data_size;
  }

  // repeated double HandoverReadyIntervals = 3 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_handoverreadyintervals_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_handoverreadyintervals_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Uncertainties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DynStacking.HotStorage.DataModel.Uncertainties)
  GOOGLE_DCHECK_NE(&from, this);
  const Uncertainties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Uncertainties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DynStacking.HotStorage.DataModel.Uncertainties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DynStacking.HotStorage.DataModel.Uncertainties)
    MergeFrom(*source);
  }
}

void Uncertainties::MergeFrom(const Uncertainties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.HotStorage.DataModel.Uncertainties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arrivalintervals_.MergeFrom(from.arrivalintervals_);
  cranemovetimes_.MergeFrom(from.cranemovetimes_);
  handoverreadyintervals_.MergeFrom(from.handoverreadyintervals_);
}

void Uncertainties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DynStacking.HotStorage.DataModel.Uncertainties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uncertainties::CopyFrom(const Uncertainties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.HotStorage.DataModel.Uncertainties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uncertainties::IsInitialized() const {
  return true;
}

void Uncertainties::InternalSwap(Uncertainties* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arrivalintervals_.InternalSwap(&other->arrivalintervals_);
  cranemovetimes_.InternalSwap(&other->cranemovetimes_);
  handoverreadyintervals_.InternalSwap(&other->handoverreadyintervals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Uncertainties::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class World::_Internal {
 public:
  static const ::DynStacking::HotStorage::DataModel::TimeStamp& now(const World* msg);
  static const ::DynStacking::HotStorage::DataModel::Stack& production(const World* msg);
  static const ::DynStacking::HotStorage::DataModel::Handover& handover(const World* msg);
  static const ::DynStacking::HotStorage::DataModel::Crane& crane(const World* msg);
  static const ::DynStacking::HotStorage::DataModel::Performance& kpis(const World* msg);
  static const ::DynStacking::HotStorage::DataModel::Uncertainties& observationdata(const World* msg);
};

const ::DynStacking::HotStorage::DataModel::TimeStamp&
World::_Internal::now(const World* msg) {
  return *msg->now_;
}
const ::DynStacking::HotStorage::DataModel::Stack&
World::_Internal::production(const World* msg) {
  return *msg->production_;
}
const ::DynStacking::HotStorage::DataModel::Handover&
World::_Internal::handover(const World* msg) {
  return *msg->handover_;
}
const ::DynStacking::HotStorage::DataModel::Crane&
World::_Internal::crane(const World* msg) {
  return *msg->crane_;
}
const ::DynStacking::HotStorage::DataModel::Performance&
World::_Internal::kpis(const World* msg) {
  return *msg->kpis_;
}
const ::DynStacking::HotStorage::DataModel::Uncertainties&
World::_Internal::observationdata(const World* msg) {
  return *msg->observationdata_;
}
World::World(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  buffers_(arena),
  invalidmoves_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DynStacking.HotStorage.DataModel.World)
}
World::World(const World& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buffers_(from.buffers_),
      invalidmoves_(from.invalidmoves_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_now()) {
    now_ = new ::DynStacking::HotStorage::DataModel::TimeStamp(*from.now_);
  } else {
    now_ = nullptr;
  }
  if (from._internal_has_production()) {
    production_ = new ::DynStacking::HotStorage::DataModel::Stack(*from.production_);
  } else {
    production_ = nullptr;
  }
  if (from._internal_has_handover()) {
    handover_ = new ::DynStacking::HotStorage::DataModel::Handover(*from.handover_);
  } else {
    handover_ = nullptr;
  }
  if (from._internal_has_crane()) {
    crane_ = new ::DynStacking::HotStorage::DataModel::Crane(*from.crane_);
  } else {
    crane_ = nullptr;
  }
  if (from._internal_has_kpis()) {
    kpis_ = new ::DynStacking::HotStorage::DataModel::Performance(*from.kpis_);
  } else {
    kpis_ = nullptr;
  }
  if (from._internal_has_observationdata()) {
    observationdata_ = new ::DynStacking::HotStorage::DataModel::Uncertainties(*from.observationdata_);
  } else {
    observationdata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DynStacking.HotStorage.DataModel.World)
}

void World::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_World_hotstorage_5fmodel_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&now_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&observationdata_) -
      reinterpret_cast<char*>(&now_)) + sizeof(observationdata_));
}

World::~World() {
  // @@protoc_insertion_point(destructor:DynStacking.HotStorage.DataModel.World)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void World::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete now_;
  if (this != internal_default_instance()) delete production_;
  if (this != internal_default_instance()) delete handover_;
  if (this != internal_default_instance()) delete crane_;
  if (this != internal_default_instance()) delete kpis_;
  if (this != internal_default_instance()) delete observationdata_;
}

void World::ArenaDtor(void* object) {
  World* _this = reinterpret_cast< World* >(object);
  (void)_this;
}
void World::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void World::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const World& World::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_World_hotstorage_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void World::Clear() {
// @@protoc_insertion_point(message_clear_start:DynStacking.HotStorage.DataModel.World)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffers_.Clear();
  invalidmoves_.Clear();
  if (GetArena() == nullptr && now_ != nullptr) {
    delete now_;
  }
  now_ = nullptr;
  if (GetArena() == nullptr && production_ != nullptr) {
    delete production_;
  }
  production_ = nullptr;
  if (GetArena() == nullptr && handover_ != nullptr) {
    delete handover_;
  }
  handover_ = nullptr;
  if (GetArena() == nullptr && crane_ != nullptr) {
    delete crane_;
  }
  crane_ = nullptr;
  if (GetArena() == nullptr && kpis_ != nullptr) {
    delete kpis_;
  }
  kpis_ = nullptr;
  if (GetArena() == nullptr && observationdata_ != nullptr) {
    delete observationdata_;
  }
  observationdata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* World::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DynStacking.HotStorage.DataModel.TimeStamp Now = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_now(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DynStacking.HotStorage.DataModel.Stack Production = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_production(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DynStacking.HotStorage.DataModel.Stack Buffers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buffers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .DynStacking.HotStorage.DataModel.Handover Handover = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_handover(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DynStacking.HotStorage.DataModel.Crane Crane = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_crane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DynStacking.HotStorage.DataModel.Performance KPIs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_kpis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DynStacking.HotStorage.DataModel.Uncertainties ObservationData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_observationdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DynStacking.HotStorage.DataModel.CraneMove InvalidMoves = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invalidmoves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* World::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DynStacking.HotStorage.DataModel.World)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DynStacking.HotStorage.DataModel.TimeStamp Now = 1;
  if (this->has_now()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::now(this), target, stream);
  }

  // .DynStacking.HotStorage.DataModel.Stack Production = 2;
  if (this->has_production()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::production(this), target, stream);
  }

  // repeated .DynStacking.HotStorage.DataModel.Stack Buffers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buffers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_buffers(i), target, stream);
  }

  // .DynStacking.HotStorage.DataModel.Handover Handover = 4;
  if (this->has_handover()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::handover(this), target, stream);
  }

  // .DynStacking.HotStorage.DataModel.Crane Crane = 5;
  if (this->has_crane()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::crane(this), target, stream);
  }

  // .DynStacking.HotStorage.DataModel.Performance KPIs = 6;
  if (this->has_kpis()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::kpis(this), target, stream);
  }

  // .DynStacking.HotStorage.DataModel.Uncertainties ObservationData = 7;
  if (this->has_observationdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::observationdata(this), target, stream);
  }

  // repeated .DynStacking.HotStorage.DataModel.CraneMove InvalidMoves = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_invalidmoves_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_invalidmoves(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DynStacking.HotStorage.DataModel.World)
  return target;
}

size_t World::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DynStacking.HotStorage.DataModel.World)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DynStacking.HotStorage.DataModel.Stack Buffers = 3;
  total_size += 1UL * this->_internal_buffers_size();
  for (const auto& msg : this->buffers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DynStacking.HotStorage.DataModel.CraneMove InvalidMoves = 8;
  total_size += 1UL * this->_internal_invalidmoves_size();
  for (const auto& msg : this->invalidmoves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DynStacking.HotStorage.DataModel.TimeStamp Now = 1;
  if (this->has_now()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *now_);
  }

  // .DynStacking.HotStorage.DataModel.Stack Production = 2;
  if (this->has_production()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *production_);
  }

  // .DynStacking.HotStorage.DataModel.Handover Handover = 4;
  if (this->has_handover()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *handover_);
  }

  // .DynStacking.HotStorage.DataModel.Crane Crane = 5;
  if (this->has_crane()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *crane_);
  }

  // .DynStacking.HotStorage.DataModel.Performance KPIs = 6;
  if (this->has_kpis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kpis_);
  }

  // .DynStacking.HotStorage.DataModel.Uncertainties ObservationData = 7;
  if (this->has_observationdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *observationdata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void World::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DynStacking.HotStorage.DataModel.World)
  GOOGLE_DCHECK_NE(&from, this);
  const World* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<World>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DynStacking.HotStorage.DataModel.World)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DynStacking.HotStorage.DataModel.World)
    MergeFrom(*source);
  }
}

void World::MergeFrom(const World& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DynStacking.HotStorage.DataModel.World)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buffers_.MergeFrom(from.buffers_);
  invalidmoves_.MergeFrom(from.invalidmoves_);
  if (from.has_now()) {
    _internal_mutable_now()->::DynStacking::HotStorage::DataModel::TimeStamp::MergeFrom(from._internal_now());
  }
  if (from.has_production()) {
    _internal_mutable_production()->::DynStacking::HotStorage::DataModel::Stack::MergeFrom(from._internal_production());
  }
  if (from.has_handover()) {
    _internal_mutable_handover()->::DynStacking::HotStorage::DataModel::Handover::MergeFrom(from._internal_handover());
  }
  if (from.has_crane()) {
    _internal_mutable_crane()->::DynStacking::HotStorage::DataModel::Crane::MergeFrom(from._internal_crane());
  }
  if (from.has_kpis()) {
    _internal_mutable_kpis()->::DynStacking::HotStorage::DataModel::Performance::MergeFrom(from._internal_kpis());
  }
  if (from.has_observationdata()) {
    _internal_mutable_observationdata()->::DynStacking::HotStorage::DataModel::Uncertainties::MergeFrom(from._internal_observationdata());
  }
}

void World::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DynStacking.HotStorage.DataModel.World)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World::CopyFrom(const World& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DynStacking.HotStorage.DataModel.World)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World::IsInitialized() const {
  return true;
}

void World::InternalSwap(World* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  buffers_.InternalSwap(&other->buffers_);
  invalidmoves_.InternalSwap(&other->invalidmoves_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(World, observationdata_)
      + sizeof(World::observationdata_)
      - PROTOBUF_FIELD_OFFSET(World, now_)>(
          reinterpret_cast<char*>(&now_),
          reinterpret_cast<char*>(&other->now_));
}

::PROTOBUF_NAMESPACE_ID::Metadata World::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DataModel
}  // namespace HotStorage
}  // namespace DynStacking
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DynStacking::HotStorage::DataModel::Block* Arena::CreateMaybeMessage< ::DynStacking::HotStorage::DataModel::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::HotStorage::DataModel::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::HotStorage::DataModel::Crane* Arena::CreateMaybeMessage< ::DynStacking::HotStorage::DataModel::Crane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::HotStorage::DataModel::Crane >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::HotStorage::DataModel::CraneMove* Arena::CreateMaybeMessage< ::DynStacking::HotStorage::DataModel::CraneMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::HotStorage::DataModel::CraneMove >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::HotStorage::DataModel::CraneSchedule* Arena::CreateMaybeMessage< ::DynStacking::HotStorage::DataModel::CraneSchedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::HotStorage::DataModel::CraneSchedule >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::HotStorage::DataModel::Handover* Arena::CreateMaybeMessage< ::DynStacking::HotStorage::DataModel::Handover >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::HotStorage::DataModel::Handover >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::HotStorage::DataModel::Performance* Arena::CreateMaybeMessage< ::DynStacking::HotStorage::DataModel::Performance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::HotStorage::DataModel::Performance >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::HotStorage::DataModel::Stack* Arena::CreateMaybeMessage< ::DynStacking::HotStorage::DataModel::Stack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::HotStorage::DataModel::Stack >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::HotStorage::DataModel::TimeStamp* Arena::CreateMaybeMessage< ::DynStacking::HotStorage::DataModel::TimeStamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::HotStorage::DataModel::TimeStamp >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::HotStorage::DataModel::Uncertainties* Arena::CreateMaybeMessage< ::DynStacking::HotStorage::DataModel::Uncertainties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::HotStorage::DataModel::Uncertainties >(arena);
}
template<> PROTOBUF_NOINLINE ::DynStacking::HotStorage::DataModel::World* Arena::CreateMaybeMessage< ::DynStacking::HotStorage::DataModel::World >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DynStacking::HotStorage::DataModel::World >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
